{"version":3,"sources":["components/ErrorView/index.tsx","context/state.tsx","components/InfoButton/index.tsx","components/Header/index.tsx","components/ContentContainer/index.tsx","components/SearchBar/index.tsx","components/Footer/index.tsx","components/AudioPlayer/index.tsx","components/Profile/index.tsx","components/Sidebar/index.tsx","components/SearchResults/index.tsx","components/Song/index.tsx","components/SongList/index.tsx","components/SearchResultsContainer/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["ErrorView","className","icon","faExclamationTriangle","apiKeyDiscogs","process","REACT_APP_APIKeyDiscogs","apiSecretSpotify","REACT_APP_APISecretSpotify","StateContext","createContext","useStateContext","useContext","StateProvider","children","useState","totalArtists","setTotalArtists","songs","setSongs","artistDetails","setArtistDetails","currentSong","setCurrentSong","token","setToken","togglePlayer","setTogglePlayer","toggleSearchResults","setToggleSearchResults","toggleProfile","setToggleProfile","toggleSearchResultsView","setToggleSearchResultsView","toggleSidebar","setToggleSidebar","songIndex","setSongIndex","displayNoTracksMessage","setDisplayNoTracksMessage","showErrorView","setShowErrorView","getAuth","a","headers","axios","post","response","data","access_token","console","error","getArtist","artistName","apiParams","apiItems","url","q","type","_","isEmpty","get","artists","items","log","getSongs","id","allTracks","tracks","tracksWithPreviews","filter","track","preview_url","getArtistDetails","endPoint","defaultContext","getArtistDiscogs","artistId","results","toString","Provider","value","InfoButton","faInfoCircle","onClick","Header","href","target","rel","src","ContentContainer","props","useEffect","Fragment","SearchBar","currentSearch","changeCurrentSearch","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","e","searchValue","updateSearchInput","Append","Button","Footer","year","Date","getFullYear","AudioPlayer","player","document","getElementById","activeButton","setActiveButton","playerIssue","setPlayerIssue","setAttribute","album","images","alt","name","faStepBackward","role","buttonPressed","newIndex","prevSrc","previousSong","faPlay","play","faPause","pause","faStepForward","nextSrc","nextSong","Profile","profile","uri","Sidebar","SearchResults","map","artist","index","then","Song","songData","Row","as","Col","xs","xl","faPlayCircle","SongList","song","SearchResultsContainer","App","StrictMode","Container","fluid","md","lg","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","URL","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7cc6a944.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ErrorView = () => {\r\n    return (\r\n        <section className=\"error_view\">\r\n            <FontAwesomeIcon icon={faExclamationTriangle} />\r\n            <p>\r\n                <span className=\"opps\">Opps!<br /></span>\r\n                <span>Something went wrong.<br />Please try again.</span>\r\n            </p>\r\n\t\t</section>\r\n    );\r\n}\r\n\r\nexport default ErrorView;","import React, { useState, useContext, createContext } from \"react\";\r\nimport axios from 'axios';\r\n//import * as secrets from '../secrets.json';\r\nimport _ from 'lodash';\r\nimport { CurrentSong, IDefaultContext } from '../interfaces/';\r\n\r\nconst apiKeyDiscogs = process.env.REACT_APP_APIKeyDiscogs;\r\nconst apiSecretSpotify = process.env.REACT_APP_APISecretSpotify\r\n\r\nconst StateContext = createContext<IDefaultContext>({} as IDefaultContext);\r\n\r\nconst useStateContext = () => useContext(StateContext);\r\n\r\nconst StateProvider = ({ children }: any) => {\r\n    const [totalArtists, setTotalArtists] = useState([]);\r\n    const [songs, setSongs] = useState([]);\r\n    const [artistDetails, setArtistDetails] = useState({});\r\n    const [currentSong, setCurrentSong] = useState({});\r\n    const [token, setToken] = useState('');\r\n    const [togglePlayer, setTogglePlayer] = useState(false);\r\n    const [toggleSearchResults, setToggleSearchResults] = useState(false);\r\n    const [toggleProfile, setToggleProfile] = useState(false);\r\n    const [toggleSearchResultsView, setToggleSearchResultsView] = useState(false);\r\n    const [toggleSidebar, setToggleSidebar] = useState(false);\r\n    const [songIndex, setSongIndex] = useState(null);\r\n    const [displayNoTracksMessage, setDisplayNoTracksMessage] = useState(true);\r\n    const [showErrorView, setShowErrorView] = useState(false);\r\n\r\n    // Spotify APIs\r\n    const getAuth = async () => {\r\n        const auth = 'Basic ' + apiSecretSpotify;\r\n\r\n        const headers = { \r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Authorization': auth\r\n        };\r\n\r\n        const url = \"https://accounts.spotify.com/api/token\";\r\n        const body = 'grant_type=client_credentials';\r\n\r\n        try {\r\n            const response = await axios.post(url, body, { headers });\r\n            setToken(response.data.access_token);\r\n            setShowErrorView(false);\r\n        } catch (error) {\r\n            setShowErrorView(true);\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const getArtist = async (artistName: string) => {\r\n        const auth = 'Bearer ' + token;\r\n\r\n        const headers = { \r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Authorization': auth\r\n        };\r\n\r\n\r\n        const apiItems = { \r\n            url: \"https://api.spotify.com/v1/search?\",\r\n            q: artistName,\r\n            type: \"artist\"\r\n        };\r\n\r\n        const apiParams = apiItems.url \r\n        + 'q=' \r\n        + apiItems.q\r\n        + '&type=' \r\n        + apiItems.type;\r\n\r\n        if(!_.isEmpty(token)) {\r\n            try {\r\n                const response = await axios.get(apiParams, { headers });\r\n                setTotalArtists(response.data.artists.items);\r\n                setShowErrorView(false);\r\n            } catch (error) {\r\n                setShowErrorView(true);\r\n                console.error(error);\r\n            }\r\n        } else {\r\n            console.log('problem with token for search');\r\n        }\r\n    };\r\n\r\n    const getSongs = async (id: string) => {\r\n        const auth = 'Bearer ' + token;\r\n\r\n        const headers = { \r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Authorization': auth        };\r\n\r\n        const url = 'https://api.spotify.com/v1/artists/';\r\n\r\n        const apiParams = url + id + '/top-tracks?market=US';\r\n\r\n        if(!_.isEmpty(token) && id !== 'none') {\r\n            try {\r\n                const response = await axios.get(apiParams, { headers });\r\n                const allTracks = response.data.tracks;\r\n\r\n                // need to only include tracks with preview_urls\r\n                const tracksWithPreviews = allTracks.filter((track: CurrentSong) => !_.isEmpty(track?.preview_url));\r\n\r\n                setSongs(tracksWithPreviews);\r\n                setShowErrorView(false);\r\n            } catch (error) {\r\n                setShowErrorView(true);\r\n                console.error(error);\r\n            }\r\n        } else {\r\n            console.log('problem with token for songs');\r\n        }\r\n    };\r\n\r\n    // Discogs APIs\r\n    const getArtistDetails = async (id: string) => {\r\n        const url = \"https://api.discogs.com/artists/\";\r\n        const endPoint = url + id;\r\n\r\n        try {\r\n            const response = await axios.get(endPoint);\r\n            setArtistDetails(response.data);\r\n            setShowErrorView(false);\r\n        } catch (error) {\r\n            setShowErrorView(true);\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const getArtistDiscogs = async (artistName: string) => {\r\n        const url = \"https://api.discogs.com/database/search?\";\r\n        const params = 'q=' + artistName + '&type=artist&token=' + apiKeyDiscogs;\r\n        const endPoint = url + params;\r\n\r\n        try {\r\n            const response = await axios.get(endPoint);\r\n            const artistId = response?.data.results[0].id;\r\n            getArtistDetails(artistId.toString());\r\n            setShowErrorView(false);\r\n        } catch (error) {\r\n            setShowErrorView(true);\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const defaultContext: IDefaultContext = {\r\n        songs,\r\n        artistDetails,\r\n        currentSong,\r\n        totalArtists,\r\n        togglePlayer,\r\n        toggleSearchResults,\r\n        toggleProfile,\r\n        toggleSearchResultsView,\r\n        toggleSidebar,\r\n        songIndex,\r\n        displayNoTracksMessage,\r\n        showErrorView,\r\n        getAuth,\r\n        getArtist,\r\n        getSongs,\r\n        getArtistDiscogs,\r\n        setCurrentSong,\r\n        setTogglePlayer,\r\n        setToggleSearchResults,\r\n        setToggleProfile,\r\n        setToggleSearchResultsView,\r\n        setTotalArtists,\r\n        setToggleSidebar,\r\n        setSongIndex,\r\n        setDisplayNoTracksMessage,\r\n        setShowErrorView\r\n    };\r\n\r\n    return (\r\n        <StateContext.Provider value={defaultContext}>\r\n            { children }\r\n        </StateContext.Provider>\r\n    )\r\n};\r\n\r\nexport { StateProvider, useStateContext, StateContext };","import React from 'react';\r\nimport { useStateContext } from '../../context/state';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst InfoButton = () => {\r\n\tconst { \r\n        setToggleProfile,\r\n        setToggleSidebar \r\n    } = useStateContext();\r\n\r\n    const toggleHandler = () => {\r\n        setToggleSidebar(true);\r\n        setToggleProfile(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"info\">\r\n            <FontAwesomeIcon type=\"button\" icon={faInfoCircle} onClick={() => toggleHandler()} />\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default InfoButton;","import React from 'react';\r\nimport InfoButton from '../InfoButton/';\r\nimport { useStateContext } from '../../context/state';\r\n\r\nconst Header = () => {\r\n    const { currentSong } = useStateContext();\r\n\r\n    const heading = 'Muzak';\r\n    const introMessage1 = 'Listen to available preview tracks from your favorite artists using ';\r\n    const introMessage2 = ' and artist information from ';\r\n    const spotify = 'Spotify';\r\n    const discogs = 'Discogs';\r\n\r\n    return <header>\r\n            <h1>{heading}</h1>\r\n            <p>\r\n                {introMessage1}\r\n                <a href=\"https://www.spotify.com\" target=\"_blank\" rel=\"noopener noreferrer\">{spotify}</a>\r\n                {introMessage2}\r\n                <a href=\"https://www.discogs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">{discogs}</a>.\r\n            </p>\r\n            <InfoButton />\r\n            {/* Putting the audio tag here in order to persist outside of the sidebar */}\r\n            <audio id=\"music\" src={ currentSong?.preview_url } />\r\n        </header>\r\n}\r\n\r\nexport default Header;","import React, { useEffect } from 'react';\r\nimport ErrorView from '../ErrorView';\r\nimport Header from '../Header';\r\nimport { useStateContext } from '../../context/state';\r\n\r\nconst ContentContainer = (props: any) => {\r\n    const { children } = props;\r\n    const { \r\n        getAuth, \r\n        showErrorView \r\n    } = useStateContext();\r\n\r\n    useEffect(() => {\r\n        getAuth();\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header />\r\n            { children }\r\n            { showErrorView && <ErrorView />}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ContentContainer;","import React, { useState } from 'react';\r\nimport { useStateContext } from '../../context/state';\r\nimport { Button, FormControl, InputGroup  } from 'react-bootstrap';\r\nimport _ from 'lodash';\r\n\r\nconst SearchBar = () => {\r\n    const { \r\n        getArtist,\r\n        setToggleSearchResultsView,\r\n        setDisplayNoTracksMessage,\r\n        displayNoTracksMessage,\r\n        setShowErrorView\r\n    } = useStateContext();\r\n\r\n    const [currentSearch, changeCurrentSearch] = useState<String>('');\r\n    \r\n    const updateSearchInput = (e: any) => {\r\n        setShowErrorView(false);\r\n        const searchValue = e.target.value;\r\n        changeCurrentSearch(searchValue);\r\n    }\r\n\r\n    const submitSearch = () => {\r\n        displayNoTracksMessage && setDisplayNoTracksMessage(false);\r\n        getArtist(currentSearch);\r\n        setToggleSearchResultsView(true);\r\n    }\r\n\r\n    return (\r\n        <InputGroup id=\"search_form\">\r\n            <FormControl\r\n                placeholder=\"Search for something?!\"\r\n                aria-label=\"SearchBar\"\r\n                aria-describedby=\"search\"\r\n                onChange={(e) => updateSearchInput(e)}\r\n            />\r\n            <InputGroup.Append>\r\n                <Button type=\"submit\" id=\"submit\" onClick={submitSearch}>Search</Button>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    const copyrightName = 'ME Innovation';\r\n    const newDate = new Date()\r\n\tconst year = newDate.getFullYear();\r\n\r\n    return (\r\n        <footer>\r\n            <small>\r\n                &copy;{year} \r\n                <a href=\"http://www.meinnovation.net\" target=\"_blank\" rel=\"noopener noreferrer\">{copyrightName}</a>\r\n            </small>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useState } from 'react';\r\nimport { useStateContext } from '../../context/state';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPause, faPlay, faStepBackward, faStepForward } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst AudioPlayer = () => {\r\n    const { \r\n        currentSong,\r\n        setTogglePlayer,\r\n        setToggleSidebar,\r\n        songs,\r\n        songIndex,\r\n        setSongIndex,\r\n        setCurrentSong\r\n    } = useStateContext();\r\n\r\n    const player = document.getElementById('music');\r\n\r\n    const [activeButton, setActiveButton] = useState<string>('pause');\r\n    const [playerIssue, setPlayerIssue] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        player?.setAttribute('src', (currentSong?.preview_url as string));\r\n    }, [player, currentSong]);\r\n\r\n    const actionMessage = 'Back to results';\r\n\r\n    const replaySong = (buttonPressed: string) => {\r\n        setActiveButton(buttonPressed);\r\n        player ? setPlayerIssue(false) : setPlayerIssue(true);\r\n        (player as HTMLAudioElement)?.play();\r\n    }\r\n\r\n    const pauseSong = (buttonPressed: string) => {\r\n        setActiveButton(buttonPressed);\r\n        (player as HTMLAudioElement)?.pause();\r\n    }\r\n\r\n    const previousSong = (buttonPressed: string) => {\r\n        setActiveButton(buttonPressed);\r\n        let currentSongIndex = songIndex!;\r\n        const newIndex = currentSongIndex - 1;\r\n        const prevSrc = songs && songs[newIndex];\r\n        setCurrentSong(prevSrc);\r\n        setSongIndex(newIndex);\r\n    }\r\n\r\n    const nextSong = (buttonPressed: string) => {\r\n        setActiveButton(buttonPressed);\r\n        let currentSongIndex = songIndex!;\r\n        const newIndex = currentSongIndex + 1;\r\n        const nextSrc = songs && songs[newIndex];\r\n        setCurrentSong(nextSrc);\r\n        setSongIndex(newIndex);\r\n    }\r\n    \r\n    const hidePlayer = () => {\r\n        setToggleSidebar(false);\r\n        setTogglePlayer(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"audioPlayer_container\">\r\n            <div id=\"audioPlayer\">\r\n                <img className=\"album_art\" src={ currentSong?.album?.images[0]?.url } alt=\"\" />\r\n                <div id=\"song_name_display\">\r\n                    {\r\n                        playerIssue ? 'Something went wrong. Please try again.' :\r\n                        (<React.Fragment>\r\n                            <p className='artist_name'>{ currentSong?.name }</p>\r\n                            <p className='album'>{ currentSong?.album?.name }</p>\r\n                        </React.Fragment>)\r\n                    }\r\n                </div>\r\n                <div id=\"controls_wrap\">\r\n                    <div id=\"audio_controls\">\r\n                        <FontAwesomeIcon \r\n                            icon={faStepBackward} \r\n                            id=\"previous_song\" \r\n                            role=\"button\"\r\n                            className={activeButton === 'previous_song' ? 'active_player_button' : ''} \r\n                            onClick={() => previousSong('previous_song')} />\r\n                        <FontAwesomeIcon \r\n                            icon={faPlay} \r\n                            id=\"play\" \r\n                            role=\"button\"\r\n                            className={activeButton === 'play' ? 'active_player_button' : ''} \r\n                            onClick={() => replaySong('play')} />\r\n                        <FontAwesomeIcon \r\n                            icon={faPause} \r\n                            id=\"pause\" \r\n                            role=\"button\"\r\n                            className={activeButton === 'pause' ? 'active_player_button' : ''} \r\n                            onClick={() => pauseSong('pause')} />\r\n                        <FontAwesomeIcon \r\n                            icon={faStepForward} \r\n                            id=\"next_song\" \r\n                            role=\"button\"\r\n                            className={activeButton === 'next_song' ? 'active_player_button' : ''} \r\n                            onClick={() => nextSong('next_song')} />\r\n                    </div>\r\n                </div>\r\n                <button id=\"mobile_back\" onClick={hidePlayer}>\r\n                    <p>{actionMessage}</p>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AudioPlayer;\r\n","import React from 'react';\r\nimport { useStateContext } from '../../context/state';\r\nimport { Button } from 'react-bootstrap';\r\nimport _ from 'lodash';\r\n\r\nconst Profile = () => {\r\n\tconst { \r\n\t\tartistDetails,\r\n\t\tsetToggleProfile,\r\n\t\tsetToggleSidebar\r\n\t} = useStateContext();\r\n\r\n\tconst toggleHandler = () => {\r\n\t\tsetToggleSidebar(false);\r\n\t\tsetToggleProfile(false);\r\n\t}\r\n\r\n    return (\r\n\t\t<div id=\"artist_info\">\r\n\t\t\t<div className=\"close\">\r\n\t\t\t\t<Button onClick={() => toggleHandler()}>X</Button>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t{\r\n\t\t\t\t\t!_.isEmpty(artistDetails) ? (<React.Fragment>\r\n\t\t\t\t\t\t<h3>{ artistDetails?.name }</h3>\r\n\t\t\t\t\t\t<p>{ artistDetails?.profile}</p>\r\n\t\t\t\t\t\t<a href={artistDetails?.uri} target=\"_blank\" rel=\"noreferrer\">\r\n\t\t\t\t\t\t\t{ 'Check out the rest of the ' + artistDetails?.name + ' profile from Discogs' }\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t) : 'Nothing to see here until you search for something'\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { useStateContext } from '../../context/state';\r\nimport AudioPlayer from '../AudioPlayer/';\r\nimport Profile from '../Profile/';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst Sidebar = () => {\r\n    const { \r\n\t\ttogglePlayer, \r\n        toggleProfile,\r\n        toggleSidebar,\r\n        currentSong,\r\n        displayNoTracksMessage,\r\n        setDisplayNoTracksMessage\r\n\t} = useStateContext();\r\n\r\n    const closeNoTrackMessageHandler = () => {\r\n\t\tsetDisplayNoTracksMessage(false);\r\n\t}\r\n\r\n    return (\r\n        <aside id=\"album_player_section\" className={toggleSidebar ? '' : 'hidden'}>\r\n            { \r\n                currentSong?.preview_url ? togglePlayer && <AudioPlayer /> :\r\n                <div className={\"no_tracks\" + (!displayNoTracksMessage ? ' hidden' : '')}>\r\n                    <div className=\"close\">\r\n                        <Button onClick={() => closeNoTrackMessageHandler()}>X</Button>\r\n                    </div>\r\n                    Sorry can't find preview tracks available for this artist right now.\r\n                    Please try again, check out their profile or select a new artist.\r\n                </div>\r\n            }\r\n            { toggleProfile && <Profile /> }\r\n        </aside>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport { useStateContext } from '../../context/state';\r\nimport _ from 'lodash';\r\n\r\nconst SearchResults = () => {\r\n    const { \r\n        totalArtists,\r\n        getSongs,\r\n        getArtistDiscogs,\r\n        setToggleSearchResultsView,\r\n        songs,\r\n        setToggleSearchResults,\r\n        setTogglePlayer\r\n    } = useStateContext();\r\n\r\n    const submitSearch = (artistName: string, artistId: string) => {\r\n        // clearing previous selections\r\n        setTogglePlayer(false);\r\n\r\n        getSongs(artistId)\r\n        .then(getArtistDiscogs(artistName))\r\n\r\n        !_.isEmpty(songs) && setToggleSearchResults(true);\r\n        setToggleSearchResultsView(false);\r\n    }\r\n\r\n    return (\r\n\t\t<div id=\"search_results\">\r\n            <h2>Search Results</h2>\r\n            <p>Please choose an option from the following:</p>\r\n            <ul>\r\n                {\r\n                    !_.isEmpty(totalArtists) ? totalArtists?.map((artist?: any, index?: number) => {\r\n                        return <li key={index} className=\"result\" onClick={() => submitSearch(artist?.name, artist?.id)}>\r\n                            { artist?.name }\r\n                        </li>\r\n                    }) : 'Sorry there was a problem. Please try again'\r\n                }\r\n            </ul>\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport { useStateContext } from '../../context/state';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlayCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport _ from 'lodash';\r\n\r\nconst Song = (props: any) => {\r\n    const { \r\n        songData,\r\n        index \r\n    } = props;\r\n\r\n    const { \r\n        setCurrentSong, \r\n        setTogglePlayer,\r\n        setToggleSidebar,\r\n        setSongIndex,\r\n        setDisplayNoTracksMessage\r\n    } = useStateContext();\r\n\r\n    const playSongs = () => {\r\n        // sends the songData to the AudioPlayer component to play\r\n        setCurrentSong(songData);\r\n        setToggleSidebar(true);\r\n        setSongIndex(index);\r\n        setDisplayNoTracksMessage(true);\r\n        setTogglePlayer(true);\r\n    }\r\n\r\n    return (\r\n        <Row as={'li'} className=\"tracks\">\r\n            <Col xs={8} xl={11} >{songData?.name}</Col>\r\n            <Col className=\"d-flex flex-row-reverse\">\r\n                <button onClick={playSongs} id=\"play_buttons\">\r\n                    <FontAwesomeIcon icon={faPlayCircle} />\r\n                </button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Song;","import React from 'react';\r\nimport Song from '../Song/';\r\n\r\nconst SongList = (props: any) => {\r\n    const { songs } = props;\r\n\r\n    const heading = 'Top Songs';\r\n\r\n    return (\r\n        <div id=\"song_list\">\r\n            <React.Fragment>\r\n                <h2>{heading}</h2>\r\n                <ul>\r\n                    {\r\n                        songs?.map((song: any, index: number) => {\r\n                            return <Song key={index} songData={song} index={index}/>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </React.Fragment>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SongList;","import React from 'react';\r\nimport SearchResults from '../SearchResults/';\r\nimport SongList from '../SongList';\r\nimport { useStateContext } from '../../context/state';\r\nimport _ from 'lodash';\r\n\r\nconst SearchResultsContainer = () => {\r\n    const { \r\n        songs, \r\n        toggleSearchResultsView\r\n    } = useStateContext();\r\n\r\n    return (\r\n        <section className=\"searchContainer\">\r\n            {\r\n                toggleSearchResultsView && <SearchResults />\r\n            }\r\n            {\r\n                !_.isEmpty(songs) && <SongList songs={songs ? songs : []} />\r\n            }\r\n\t\t</section>\r\n    );\r\n}\r\n\r\nexport default SearchResultsContainer;","import React from 'react';\r\nimport ContentContainer from './ContentContainer';\r\nimport SearchBar from './SearchBar/';\r\nimport Footer from './Footer/';\r\nimport Sidebar from './Sidebar/';\r\nimport SearchResultsContainer from \"./SearchResultsContainer/\";\r\nimport { StateProvider } from '../context/state';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nconst App = () => {\r\n    return (\r\n        <React.StrictMode>\r\n            <StateProvider>\r\n                <Container fluid>\r\n                    <Row id=\"content_wrap\">\r\n                        <Col xs={12} md={7} lg={7} xl={7}>\r\n                            <ContentContainer>\r\n                                <SearchBar />\r\n                                <SearchResultsContainer />\r\n                            </ContentContainer>\r\n                        </Col>\r\n                        <Col className=\"sidebar_container\" xs={12} md={5} lg={5} xl={5}>\r\n                            <Sidebar />\r\n                        </Col>\r\n                        <Footer />\r\n                    </Row>\r\n                </Container>\r\n            </StateProvider>\r\n        </React.StrictMode>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./scss/style.scss\";\n\nReactDOM.render(\n\t<App />, \n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}